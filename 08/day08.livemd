# Day 08

## Part 1

```elixir
puzzle_input = File.read!(Path.join(__DIR__, "input.txt"))
example = File.read!(Path.join(__DIR__, "example.txt"))
example2 = File.read!(Path.join(__DIR__, "example2.txt"))
example3 = File.read!(Path.join(__DIR__, "example3.txt"))
```

```elixir
defmodule Day08 do
  def parse(input) do
    [instructions, network] =
      input
      |> String.split("\n\n")

    instructions =
      String.codepoints(instructions)
      |> Enum.map(fn
        "L" -> :left
        "R" -> :right
      end)

    network =
      network
      |> String.split("\n", trim: true)
      |> Enum.map(fn line ->
        [id, left, right] =
          line
          |> String.split([" = ", ", ", "(", ")"], trim: true)

        {id,
         %{
           left: left,
           right: right
         }}
      end)
      |> Map.new()

    {
      instructions,
      network
    }
  end

  def part1({instructions, map}) do
    count_steps("AAA", ["ZZZ"], map, instructions)
  end

  defp count_steps(start_node, end_nodes, map, instructions) do
    Enum.reduce_while(Stream.cycle(instructions), {start_node, 0}, fn
      instr, {pos, steps} ->
        if pos in end_nodes do
          {:halt, steps}
        else
          {:cont, {map[pos][instr], steps + 1}}
        end
    end)
  end

  def part2({instructions, map}) do
    nodes = Map.keys(map)
    start_nodes = nodes |> Enum.filter(&String.ends_with?(&1, "A"))
    end_nodes = nodes |> Enum.filter(&String.ends_with?(&1, "Z"))

    for start_node <- start_nodes, reduce: 1 do
      lcd ->
        steps = count_steps(start_node, end_nodes, map, instructions)
        div(steps * lcd, Integer.gcd(steps, lcd))
    end
  end
end
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day08.parse(example)
|> Day08.part1()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day08.parse(example2)
|> Day08.part1()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day08.parse(puzzle_input)
|> Day08.part1()
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day08.parse(example3)
|> Day08.part2()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day08.parse(puzzle_input)
|> Day08.part2()
```
